// –ò–ù–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =========================================================


// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT
const client = mqtt.connect(MQTT_CONFIG.host, {
  username: MQTT_CONFIG.username,
  password: MQTT_CONFIG.password
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase
// firebaseConfig —Ç–µ–ø–µ—Ä—å –±–µ—Ä—ë—Ç—Å—è –∏–∑ config.js
const app = firebase.initializeApp(firebaseConfig);
const analytics = firebase.analytics(app);


// –§–†–û–ù–¢–ï–ù–î ====================================================================

// –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É)
function updateConnectionStatus(connected) {
	const dot = document.getElementById('status-dot');
	const text = document.getElementById('status-text');
	if (connected) {
		dot.classList.add('connected');
		dot.classList.remove('disconnected');
		text.textContent = '—Å–æ–µ–¥–∏–Ω–µ–Ω–æ';
		text.style.color = '#388e3c';
	} else {
		dot.classList.add('disconnected');
		dot.classList.remove('connected');
		text.textContent = '–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
		text.style.color = '#b71c1c';
	}
}


client.on("connect", function() {
	const dot = document.getElementById('status-dot');
	const text = document.getElementById('status-text');
  dot.classList.add('connected');
	dot.classList.remove('disconnected');
	text.textContent = '—Å–æ–µ–¥–∏–Ω–µ–Ω–æ';
	text.style.color = '#388e3c';
  console.log("Connected to MQTT broker");
});
client.on("error", function(err) {
	const dot = document.getElementById('status-dot');
	const text = document.getElementById('status-text');
	dot.classList.add('disconnected');
	dot.classList.remove('connected');
	text.textContent = '–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
	text.style.color = '#b71c1c';
  console.log("Connection error: " + err.message);
});


// –ü—Ä–∏–º–µ—Ä: —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
	// ...—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥...

	

	// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –∏ –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫
	const form = document.querySelector('form');
	const errorDiv = document.getElementById('error-message');
	form.addEventListener('submit', function(e) {
    // –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    function isPINcorrect(PIN) {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PIN
      console.log('–ø–∏–Ω', PIN, '–ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É' );
      return true; // –ó–∞–≥–ª—É—à–∫–∞, –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true
    }
		e.preventDefault();
		errorDiv.textContent = '';
		let hasError = false;
		const pin = form.elements['pin'].value.trim();
		if (!/^\d{4}$/.test(pin) || Number(pin) < 1000 || Number(pin) > 9999) {
			errorDiv.textContent = 'PIN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1000 –¥–æ 9999';
			hasError = true;
		}
		// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ qty
		let quantities = {};
		for (let i = 1; i <= 8; i++) {
			let val = form.elements['qty' + i]?.value;
			quantities['qty' + i] = val !== undefined ? Number(val) : null;
		}
		// –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
		if (hasError) {
			return;
		}
		// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–∏–Ω JSON
		const data = {
			...quantities
		};
		// –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —Ñ–∞–π–ª
		// –î–ª—è –ø—Ä–∏–º–µ—Ä–∞: –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
    if(!isPINcorrect(pin)) {
      errorDiv.style.color = '#c22121ff';
      errorDiv.textContent = '–ù–µ–≤–µ—Ä–Ω—ã–π PIN';
      return;
    }
    else{ 
      const payload =  JSON.stringify(data, null, 2)
      console.log('–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', payload);
      client.publish("esp32/qty", payload);
      console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ ESP32');
      e.preventDefault();
		  errorDiv.style.color = '#388e3c';
		  errorDiv.textContent = '–î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã –≤ JSON (—Å–º. –∫–æ–Ω—Å–æ–ª—å)';

    }
		
		setTimeout(()=>{errorDiv.textContent=''; errorDiv.style.color='#e53935';}, 2000);
	});
});

// –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ + –∏ - –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–≤–æ–¥–∞
document.addEventListener('DOMContentLoaded', function() {
	document.querySelectorAll('.quantity-control').forEach(function(control) {
		const input = control.querySelector('.qty-input');
		const btns = control.querySelectorAll('.qty-btn');
		btns.forEach(function(btn) {
			btn.addEventListener('click', function() {
				let value = parseInt(input.value) || 0;
				if (btn.dataset.action === 'increment') {
					if (value < 4) input.value = value + 1;
				} else {
					if (value > 0) input.value = value - 1;
				}
			});
		});
		input.addEventListener('input', function() {
			let value = parseInt(input.value) || 0;
			if (value < 0) input.value = 0;
			if (value > 4) input.value = 4;
		});
	});
});



// –û–¢–†–ê–í–ö–ê –î–ê–ù–ù–´–• –ù–ê ESP32 ====================================================

/*
client.on("connect", function() {
  document.getElementById("status").innerText = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MQTT";
});

client.on("error", function(err) {
  document.getElementById("status").innerText = "‚ùå –û—à–∏–±–∫–∞: " + err.message;
});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
document.getElementById("controlForm").addEventListener("submit", function(e) {
  e.preventDefault();

  const name = document.getElementById("name").value;
  const command = document.getElementById("command").value;

  const payload = JSON.stringify({
    user: name,
    cmd: command
  });

  client.publish("esp32/form", payload);

  document.getElementById("status").innerText = "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " + payload;
});

 */

// –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å HiveMQ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener("beforeunload", function () {
    client.end();
});