// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT
const client = mqtt.connect(MQTT_CONFIG.host, {
  username: MQTT_CONFIG.username,
  password: MQTT_CONFIG.password
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase
// firebaseConfig —Ç–µ–ø–µ—Ä—å –±–µ—Ä—ë—Ç—Å—è –∏–∑ config.js
const app = firebase.initializeApp(firebaseConfig);
const analytics = firebase.analytics(app);






client.on("connect", function() {
  document.getElementById("status").innerText = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MQTT";
});

client.on("error", function(err) {
  document.getElementById("status").innerText = "‚ùå –û—à–∏–±–∫–∞: " + err.message;
});


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
document.getElementById("controlForm").addEventListener("submit", function(e) {
  e.preventDefault();

  const name = document.getElementById("name").value;
  const command = document.getElementById("command").value;

  const payload = JSON.stringify({
    user: name,
    cmd: command
  });

  client.publish("esp32/form", payload);

  document.getElementById("status").innerText = "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: " + payload;
});


// –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å HiveMQ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener("beforeunload", function () {
    client.end();
});